{"ast":null,"code":"import _classCallCheck from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DEFAULT_TIMEOUT } from '../lib/constants';\nvar Push = /*#__PURE__*/function () {\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  function Push(channel, event) {\n    var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_TIMEOUT;\n    _classCallCheck(this, Push);\n    this.channel = channel;\n    this.event = event;\n    this.payload = payload;\n    this.timeout = timeout;\n    this.sent = false;\n    this.timeoutTimer = undefined;\n    this.ref = '';\n    this.receivedResp = null;\n    this.recHooks = [];\n    this.refEvent = null;\n    this.rateLimited = false;\n  }\n  _createClass(Push, [{\n    key: \"resend\",\n    value: function resend(timeout) {\n      this.timeout = timeout;\n      this._cancelRefEvent();\n      this.ref = '';\n      this.refEvent = null;\n      this.receivedResp = null;\n      this.sent = false;\n      this.send();\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      if (this._hasReceived('timeout')) {\n        return;\n      }\n      this.startTimeout();\n      this.sent = true;\n      var status = this.channel.socket.push({\n        topic: this.channel.topic,\n        event: this.event,\n        payload: this.payload,\n        ref: this.ref,\n        join_ref: this.channel._joinRef()\n      });\n      if (status === 'rate limited') {\n        this.rateLimited = true;\n      }\n    }\n  }, {\n    key: \"updatePayload\",\n    value: function updatePayload(payload) {\n      this.payload = Object.assign(Object.assign({}, this.payload), payload);\n    }\n  }, {\n    key: \"receive\",\n    value: function receive(status, callback) {\n      var _a;\n      if (this._hasReceived(status)) {\n        callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\n      }\n      this.recHooks.push({\n        status: status,\n        callback: callback\n      });\n      return this;\n    }\n  }, {\n    key: \"startTimeout\",\n    value: function startTimeout() {\n      var _this = this;\n      if (this.timeoutTimer) {\n        return;\n      }\n      this.ref = this.channel.socket._makeRef();\n      this.refEvent = this.channel._replyEventName(this.ref);\n      var callback = function callback(payload) {\n        _this._cancelRefEvent();\n        _this._cancelTimeout();\n        _this.receivedResp = payload;\n        _this._matchReceive(payload);\n      };\n      this.channel._on(this.refEvent, {}, callback);\n      this.timeoutTimer = setTimeout(function () {\n        _this.trigger('timeout', {});\n      }, this.timeout);\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(status, response) {\n      if (this.refEvent) this.channel._trigger(this.refEvent, {\n        status: status,\n        response: response\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._cancelRefEvent();\n      this._cancelTimeout();\n    }\n  }, {\n    key: \"_cancelRefEvent\",\n    value: function _cancelRefEvent() {\n      if (!this.refEvent) {\n        return;\n      }\n      this.channel._off(this.refEvent, {});\n    }\n  }, {\n    key: \"_cancelTimeout\",\n    value: function _cancelTimeout() {\n      clearTimeout(this.timeoutTimer);\n      this.timeoutTimer = undefined;\n    }\n  }, {\n    key: \"_matchReceive\",\n    value: function _matchReceive(_ref) {\n      var status = _ref.status,\n        response = _ref.response;\n      this.recHooks.filter(function (h) {\n        return h.status === status;\n      }).forEach(function (h) {\n        return h.callback(response);\n      });\n    }\n  }, {\n    key: \"_hasReceived\",\n    value: function _hasReceived(status) {\n      return this.receivedResp && this.receivedResp.status === status;\n    }\n  }]);\n  return Push;\n}();\nexport { Push as default };","map":{"version":3,"mappings":"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","names":["DEFAULT_TIMEOUT","Push","channel","event","payload","timeout","undefined","_cancelRefEvent","ref","refEvent","receivedResp","sent","send","_hasReceived","startTimeout","status","socket","push","topic","join_ref","_joinRef","rateLimited","callback","response","recHooks","timeoutTimer","_makeRef","_replyEventName","_cancelTimeout","_matchReceive","_on","setTimeout","trigger","_trigger","_off","clearTimeout","filter","h","forEach"],"sources":["C:\\Users\\zoila\\OneDrive\\Escritorio\\Today-i-learned\\node_modules\\@supabase\\realtime-js\\src\\lib\\push.ts"],"sourcesContent":["import { DEFAULT_TIMEOUT } from '../lib/constants'\nimport RealtimeChannel from '../RealtimeChannel'\n\nexport default class Push {\n  sent: boolean = false\n  timeoutTimer: number | undefined = undefined\n  ref: string = ''\n  receivedResp: {\n    status: string\n    response: { [key: string]: any }\n  } | null = null\n  recHooks: {\n    status: string\n    callback: Function\n  }[] = []\n  refEvent: string | null = null\n  rateLimited: boolean = false\n\n  /**\n   * Initializes the Push\n   *\n   * @param channel The Channel\n   * @param event The event, for example `\"phx_join\"`\n   * @param payload The payload, for example `{user_id: 123}`\n   * @param timeout The push timeout in milliseconds\n   */\n  constructor(\n    public channel: RealtimeChannel,\n    public event: string,\n    public payload: { [key: string]: any } = {},\n    public timeout: number = DEFAULT_TIMEOUT\n  ) {}\n\n  resend(timeout: number) {\n    this.timeout = timeout\n    this._cancelRefEvent()\n    this.ref = ''\n    this.refEvent = null\n    this.receivedResp = null\n    this.sent = false\n    this.send()\n  }\n\n  send() {\n    if (this._hasReceived('timeout')) {\n      return\n    }\n    this.startTimeout()\n    this.sent = true\n    const status = this.channel.socket.push({\n      topic: this.channel.topic,\n      event: this.event,\n      payload: this.payload,\n      ref: this.ref,\n      join_ref: this.channel._joinRef(),\n    })\n    if (status === 'rate limited') {\n      this.rateLimited = true\n    }\n  }\n\n  updatePayload(payload: { [key: string]: any }): void {\n    this.payload = { ...this.payload, ...payload }\n  }\n\n  receive(status: string, callback: Function) {\n    if (this._hasReceived(status)) {\n      callback(this.receivedResp?.response)\n    }\n\n    this.recHooks.push({ status, callback })\n    return this\n  }\n\n  startTimeout() {\n    if (this.timeoutTimer) {\n      return\n    }\n    this.ref = this.channel.socket._makeRef()\n    this.refEvent = this.channel._replyEventName(this.ref)\n\n    const callback = (payload: any) => {\n      this._cancelRefEvent()\n      this._cancelTimeout()\n      this.receivedResp = payload\n      this._matchReceive(payload)\n    }\n\n    this.channel._on(this.refEvent, {}, callback)\n\n    this.timeoutTimer = <any>setTimeout(() => {\n      this.trigger('timeout', {})\n    }, this.timeout)\n  }\n\n  trigger(status: string, response: any) {\n    if (this.refEvent)\n      this.channel._trigger(this.refEvent, { status, response })\n  }\n\n  destroy() {\n    this._cancelRefEvent()\n    this._cancelTimeout()\n  }\n\n  private _cancelRefEvent() {\n    if (!this.refEvent) {\n      return\n    }\n\n    this.channel._off(this.refEvent, {})\n  }\n\n  private _cancelTimeout() {\n    clearTimeout(this.timeoutTimer)\n    this.timeoutTimer = undefined\n  }\n\n  private _matchReceive({\n    status,\n    response,\n  }: {\n    status: string\n    response: Function\n  }) {\n    this.recHooks\n      .filter((h) => h.status === status)\n      .forEach((h) => h.callback(response))\n  }\n\n  private _hasReceived(status: string) {\n    return this.receivedResp && this.receivedResp.status === status\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}