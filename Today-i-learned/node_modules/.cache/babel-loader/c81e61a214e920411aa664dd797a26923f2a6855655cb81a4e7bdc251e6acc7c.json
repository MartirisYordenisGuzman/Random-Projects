{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError } from '../lib/errors';\nimport { get, post, remove as _remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nvar DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nvar DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nvar StorageFileApi = /*#__PURE__*/function () {\n  function StorageFileApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    var fetch = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, StorageFileApi);\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  _createClass(StorageFileApi, [{\n    key: \"uploadOrUpdate\",\n    value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var body, options, headers, cleanPath, _path, res, error;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n                  'x-upsert': String(options.upsert)\n                });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                  body = new FormData();\n                  body.append('cacheControl', options.cacheControl);\n                  body.append('', fileBody);\n                } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                  body = fileBody;\n                  body.append('cacheControl', options.cacheControl);\n                } else {\n                  body = fileBody;\n                  headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                  headers['content-type'] = options.contentType;\n                }\n                cleanPath = this._removeEmptyFolders(path);\n                _path = this._getFinalPath(cleanPath);\n                _context.next = 8;\n                return this.fetch(\"\".concat(this.url, \"/object/\").concat(_path), {\n                  method: method,\n                  body: body,\n                  headers: headers\n                });\n              case 8:\n                res = _context.sent;\n                if (!res.ok) {\n                  _context.next = 13;\n                  break;\n                }\n                return _context.abrupt(\"return\", {\n                  data: {\n                    path: cleanPath\n                  },\n                  error: null\n                });\n              case 13:\n                _context.next = 15;\n                return res.json();\n              case 15:\n                error = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: error\n                });\n              case 17:\n                _context.next = 24;\n                break;\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](0);\n                if (!isStorageError(_context.t0)) {\n                  _context.next = 23;\n                  break;\n                }\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n              case 23:\n                throw _context.t0;\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 19]]);\n      }));\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"upload\",\n    value: function upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.uploadOrUpdate('POST', path, fileBody, fileOptions));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"update\",\n    value: function update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.uploadOrUpdate('PUT', path, fileBody, fileOptions));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n  }, {\n    key: \"move\",\n    value: function move(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                if (!isStorageError(_context4.t0)) {\n                  _context4.next = 11;\n                  break;\n                }\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n              case 11:\n                throw _context4.t0;\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  data: {\n                    path: data.Key\n                  },\n                  error: null\n                });\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                if (!isStorageError(_context5.t0)) {\n                  _context5.next = 11;\n                  break;\n                }\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n              case 11:\n                throw _context5.t0;\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n  }, {\n    key: \"createSignedUrl\",\n    value: function createSignedUrl(path, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _path, data, downloadQueryParam, signedUrl;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _path = this._getFinalPath(path);\n                _context6.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), {\n                  expiresIn: expiresIn\n                }, {\n                  headers: this.headers\n                });\n              case 4:\n                data = _context6.sent;\n                downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n                signedUrl = encodeURI(\"\".concat(this.url).concat(data.signedURL).concat(downloadQueryParam));\n                data = {\n                  signedUrl: signedUrl\n                };\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](0);\n                if (!isStorageError(_context6.t0)) {\n                  _context6.next = 15;\n                  break;\n                }\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n              case 15:\n                throw _context6.t0;\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n  }, {\n    key: \"createSignedUrls\",\n    value: function createSignedUrls(paths, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _this = this;\n        var data, downloadQueryParam;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n                  expiresIn: expiresIn,\n                  paths: paths\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context7.sent;\n                downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n                return _context7.abrupt(\"return\", {\n                  data: data.map(function (datum) {\n                    return Object.assign(Object.assign({}, datum), {\n                      signedUrl: datum.signedURL ? encodeURI(\"\".concat(_this.url).concat(datum.signedURL).concat(downloadQueryParam)) : null\n                    });\n                  }),\n                  error: null\n                });\n              case 8:\n                _context7.prev = 8;\n                _context7.t0 = _context7[\"catch\"](0);\n                if (!isStorageError(_context7.t0)) {\n                  _context7.next = 12;\n                  break;\n                }\n                return _context7.abrupt(\"return\", {\n                  data: null,\n                  error: _context7.t0\n                });\n              case 12:\n                throw _context7.t0;\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 8]]);\n      }));\n    }\n    /**\n     * Downloads a file.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     */\n  }, {\n    key: \"download\",\n    value: function download(path) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _path, res, data;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _path = this._getFinalPath(path);\n                _context8.next = 4;\n                return get(this.fetch, \"\".concat(this.url, \"/object/\").concat(_path), {\n                  headers: this.headers,\n                  noResolveJson: true\n                });\n              case 4:\n                res = _context8.sent;\n                _context8.next = 7;\n                return res.blob();\n              case 7:\n                data = _context8.sent;\n                return _context8.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 11:\n                _context8.prev = 11;\n                _context8.t0 = _context8[\"catch\"](0);\n                if (!isStorageError(_context8.t0)) {\n                  _context8.next = 15;\n                  break;\n                }\n                return _context8.abrupt(\"return\", {\n                  data: null,\n                  error: _context8.t0\n                });\n              case 15:\n                throw _context8.t0;\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Retrieves the URL for an asset in a public bucket.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(path, options) {\n      var _path = this._getFinalPath(path);\n      var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"?download=\".concat(options.download === true ? '' : options.download) : '';\n      return {\n        data: {\n          publicUrl: encodeURI(\"\".concat(this.url, \"/object/public/\").concat(_path).concat(downloadQueryParam))\n        }\n      };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(paths) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return _remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n                  prefixes: paths\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context9.sent;\n                return _context9.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context9.prev = 7;\n                _context9.t0 = _context9[\"catch\"](0);\n                if (!isStorageError(_context9.t0)) {\n                  _context9.next = 11;\n                  break;\n                }\n                return _context9.abrupt(\"return\", {\n                  data: null,\n                  error: _context9.t0\n                });\n              case 11:\n                throw _context9.t0;\n              case 12:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n  }, {\n    key: \"list\",\n    value: function list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var body, data;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n                  prefix: path || ''\n                });\n                _context10.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n                  headers: this.headers\n                }, parameters);\n              case 4:\n                data = _context10.sent;\n                return _context10.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 8:\n                _context10.prev = 8;\n                _context10.t0 = _context10[\"catch\"](0);\n                if (!isStorageError(_context10.t0)) {\n                  _context10.next = 12;\n                  break;\n                }\n                return _context10.abrupt(\"return\", {\n                  data: null,\n                  error: _context10.t0\n                });\n              case 12:\n                throw _context10.t0;\n              case 13:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"_getFinalPath\",\n    value: function _getFinalPath(path) {\n      return \"\".concat(this.bucketId, \"/\").concat(path);\n    }\n  }, {\n    key: \"_removeEmptyFolders\",\n    value: function _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n  }]);\n  return StorageFileApi;\n}();\nexport { StorageFileApi as default };","map":{"version":3,"mappings":"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","names":["isStorageError","get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","url","headers","bucketId","fetch","method","path","fileBody","fileOptions","options","String","Blob","body","FormData","append","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","ok","data","error","json","uploadOrUpdate","fromPath","toPath","sourceKey","destinationKey","Key","expiresIn","downloadQueryParam","download","signedUrl","encodeURI","signedURL","paths","map","datum","Object","noResolveJson","blob","publicUrl","prefixes","parameters","prefix","replace"],"sources":["C:\\Users\\zoila\\OneDrive\\Escritorio\\Today-i-learned\\node_modules\\@supabase\\storage-js\\src\\packages\\StorageFileApi.ts"],"sourcesContent":["import { isStorageError, StorageError } from '../lib/errors'\nimport { Fetch, get, post, remove } from '../lib/fetch'\nimport { resolveFetch } from '../lib/helpers'\nimport { FileObject, FileOptions, SearchOptions, FetchParameters } from '../lib/types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\nexport default class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        return {\n          data: { path: cleanPath },\n          error: null,\n        }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async upload(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { message: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Copies an existing file to a new path in the same bucket.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<\n    | {\n        data: { path: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data: { path: data.Key }, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param path The file path, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number,\n    options?: { download: string | boolean }\n  ): Promise<\n    | {\n        data: { signedUrl: string }\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const _path = this._getFinalPath(path)\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn },\n        { headers: this.headers }\n      )\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`)\n      data = { signedUrl }\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number,\n    options?: { download: string | boolean }\n  ): Promise<\n    | {\n        data: { error: string | null; path: string | null; signedUrl: string }[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n\n      const downloadQueryParam = options?.download\n        ? `&download=${options.download === true ? '' : options.download}`\n        : ''\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedUrl: datum.signedURL\n            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n            : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Downloads a file.\n   *\n   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n   */\n  async download(\n    path: string\n  ): Promise<\n    | {\n        data: Blob\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Retrieves the URL for an asset in a public bucket.\n   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n   *\n   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n   */\n  getPublicUrl(\n    path: string,\n    options?: { download: string | boolean }\n  ): { data: { publicUrl: string } } {\n    const _path = this._getFinalPath(path)\n    const downloadQueryParam = options?.download\n      ? `?download=${options.download === true ? '' : options.download}`\n      : ''\n\n    return {\n      data: { publicUrl: encodeURI(`${this.url}/object/public/${_path}${downloadQueryParam}`) },\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n   */\n  async remove(\n    paths: string[]\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(\n  //   id: string\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<\n  //   | {\n  //       data: Metadata\n  //       error: null\n  //     }\n  //   | {\n  //       data: null\n  //       error: StorageError\n  //     }\n  // > {\n  //   try {\n  //     const data = await post(\n  //       this.fetch,\n  //       `${this.url}/metadata/${id}`,\n  //       { ...meta },\n  //       { headers: this.headers }\n  //     )\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     if (isStorageError(error)) {\n  //       return { data: null, error }\n  //     }\n\n  //     throw error\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<\n    | {\n        data: FileObject[]\n        error: null\n      }\n    | {\n        data: null\n        error: StorageError\n      }\n  > {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      if (isStorageError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  private _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  private _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}