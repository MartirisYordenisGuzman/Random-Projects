{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n  REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nvar RealtimeChannel = /*#__PURE__*/function () {\n  function RealtimeChannel( /** Topic name can be any string. */\n  topic) {\n    var _this = this;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    var socket = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, RealtimeChannel);\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: ''\n      }\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(function () {\n      return _this._rejoinUntilConnected();\n    }, this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', function () {\n      _this.state = CHANNEL_STATES.joined;\n      _this.rejoinTimer.reset();\n      _this.pushBuffer.forEach(function (pushEvent) {\n        return pushEvent.send();\n      });\n      _this.pushBuffer = [];\n    });\n    this._onClose(function () {\n      _this.rejoinTimer.reset();\n      _this.socket.log('channel', \"close \".concat(_this.topic, \" \").concat(_this._joinRef()));\n      _this.state = CHANNEL_STATES.closed;\n      _this.socket._remove(_this);\n    });\n    this._onError(function (reason) {\n      if (_this._isLeaving() || _this._isClosed()) {\n        return;\n      }\n      _this.socket.log('channel', \"error \".concat(_this.topic), reason);\n      _this.state = CHANNEL_STATES.errored;\n      _this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', function () {\n      if (!_this._isJoining()) {\n        return;\n      }\n      _this.socket.log('channel', \"timeout \".concat(_this.topic), _this.joinPush.timeout);\n      _this.state = CHANNEL_STATES.errored;\n      _this.rejoinTimer.scheduleTimeout();\n    });\n    this._on(CHANNEL_EVENTS.reply, {}, function (payload, ref) {\n      _this._trigger(_this._replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n  }\n  /** Subscribe registers your client with the server */\n  _createClass(RealtimeChannel, [{\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      var _this2 = this;\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.timeout;\n      var _a, _b;\n      if (this.joinedOnce) {\n        throw \"tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance\";\n      } else {\n        var _this$params$config = this.params.config,\n          broadcast = _this$params$config.broadcast,\n          presence = _this$params$config.presence;\n        this._onError(function (e) {\n          return callback && callback('CHANNEL_ERROR', e);\n        });\n        this._onClose(function () {\n          return callback && callback('CLOSED');\n        });\n        var accessTokenPayload = {};\n        var config = {\n          broadcast: broadcast,\n          presence: presence,\n          postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(function (r) {\n            return r.filter;\n          })) !== null && _b !== void 0 ? _b : []\n        };\n        if (this.socket.accessToken) {\n          accessTokenPayload.access_token = this.socket.accessToken;\n        }\n        this.updateJoinPayload(Object.assign({\n          config: config\n        }, accessTokenPayload));\n        this.joinedOnce = true;\n        this._rejoin(timeout);\n        this.joinPush.receive('ok', function (_ref2) {\n          var serverPostgresFilters = _ref2.postgres_changes;\n          var _a;\n          _this2.socket.accessToken && _this2.socket.setAuth(_this2.socket.accessToken);\n          if (serverPostgresFilters === undefined) {\n            callback && callback('SUBSCRIBED');\n            return;\n          } else {\n            var clientPostgresBindings = _this2.bindings.postgres_changes;\n            var bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n            var newPostgresBindings = [];\n            for (var i = 0; i < bindingsLen; i++) {\n              var clientPostgresBinding = clientPostgresBindings[i];\n              var _clientPostgresBindin = clientPostgresBinding.filter,\n                event = _clientPostgresBindin.event,\n                schema = _clientPostgresBindin.schema,\n                table = _clientPostgresBindin.table,\n                filter = _clientPostgresBindin.filter;\n              var serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n              if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n                newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                  id: serverPostgresFilter.id\n                }));\n              } else {\n                _this2.unsubscribe();\n                callback && callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n                return;\n              }\n            }\n            _this2.bindings.postgres_changes = newPostgresBindings;\n            callback && callback('SUBSCRIBED');\n            return;\n          }\n        }).receive('error', function (error) {\n          callback && callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n          return;\n        }).receive('timeout', function () {\n          callback && callback('TIMED_OUT');\n          return;\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"presenceState\",\n    value: function presenceState() {\n      return this.presence.state;\n    }\n  }, {\n    key: \"track\",\n    value: function track(payload) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.send({\n                  type: 'presence',\n                  event: 'track',\n                  payload: payload\n                }, opts.timeout || this.timeout);\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"untrack\",\n    value: function untrack() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.send({\n                  type: 'presence',\n                  event: 'untrack'\n                }, opts);\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, filter, callback) {\n      return this._on(type, filter, callback);\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload) {\n      var _this3 = this;\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve) {\n        var _a, _b, _c;\n        var push = _this3._push(payload.type, payload, opts.timeout || _this3.timeout);\n        if (push.rateLimited) {\n          resolve('rate limited');\n        }\n        if (payload.type === 'broadcast' && !((_c = (_b = (_a = _this3.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n          resolve('ok');\n        }\n        push.receive('ok', function () {\n          return resolve('ok');\n        });\n        push.receive('timeout', function () {\n          return resolve('timed out');\n        });\n      });\n    }\n  }, {\n    key: \"updateJoinPayload\",\n    value: function updateJoinPayload(payload) {\n      this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this4 = this;\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      this.state = CHANNEL_STATES.leaving;\n      var onClose = function onClose() {\n        _this4.socket.log('channel', \"leave \".concat(_this4.topic));\n        _this4._trigger(CHANNEL_EVENTS.close, 'leave', _this4._joinRef());\n      };\n      this.rejoinTimer.reset();\n      // Destroy joinPush to avoid connection timeouts during unscription phase\n      this.joinPush.destroy();\n      return new Promise(function (resolve) {\n        var leavePush = new Push(_this4, CHANNEL_EVENTS.leave, {}, timeout);\n        leavePush.receive('ok', function () {\n          onClose();\n          resolve('ok');\n        }).receive('timeout', function () {\n          onClose();\n          resolve('timed out');\n        }).receive('error', function () {\n          resolve('error');\n        });\n        leavePush.send();\n        if (!_this4._canPush()) {\n          leavePush.trigger('ok', {});\n        }\n      });\n    }\n    /** @internal */\n  }, {\n    key: \"_push\",\n    value: function _push(event, payload) {\n      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n      if (!this.joinedOnce) {\n        throw \"tried to push '\".concat(event, \"' to '\").concat(this.topic, \"' before joining. Use channel.subscribe() before pushing events\");\n      }\n      var pushEvent = new Push(this, event, payload, timeout);\n      if (this._canPush()) {\n        pushEvent.send();\n      } else {\n        pushEvent.startTimeout();\n        this.pushBuffer.push(pushEvent);\n      }\n      return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(_event, payload, _ref) {\n      return payload;\n    }\n    /** @internal */\n  }, {\n    key: \"_isMember\",\n    value: function _isMember(topic) {\n      return this.topic === topic;\n    }\n    /** @internal */\n  }, {\n    key: \"_joinRef\",\n    value: function _joinRef() {\n      return this.joinPush.ref;\n    }\n    /** @internal */\n  }, {\n    key: \"_trigger\",\n    value: function _trigger(type, payload, ref) {\n      var _this5 = this;\n      var _a, _b;\n      var typeLower = type.toLocaleLowerCase();\n      var close = CHANNEL_EVENTS.close,\n        error = CHANNEL_EVENTS.error,\n        leave = CHANNEL_EVENTS.leave,\n        join = CHANNEL_EVENTS.join;\n      var events = [close, error, leave, join];\n      if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n        return;\n      }\n      var handledPayload = this._onMessage(typeLower, payload, ref);\n      if (payload && !handledPayload) {\n        throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n      }\n      if (['insert', 'update', 'delete'].includes(typeLower)) {\n        (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(function (bind) {\n          var _a, _b, _c;\n          return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n        }).map(function (bind) {\n          return bind.callback(handledPayload, ref);\n        });\n      } else {\n        (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(function (bind) {\n          var _a, _b, _c, _d, _e, _f;\n          if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n            if ('id' in bind) {\n              var bindId = bind.id;\n              var bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n              return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n            } else {\n              var _bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n              return _bindEvent === '*' || _bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower;\n          }\n        }).map(function (bind) {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            var postgresChanges = handledPayload.data;\n            var schema = postgresChanges.schema,\n              table = postgresChanges.table,\n              commit_timestamp = postgresChanges.commit_timestamp,\n              _type = postgresChanges.type,\n              errors = postgresChanges.errors;\n            var enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: _type,\n              new: {},\n              old: {},\n              errors: errors\n            };\n            handledPayload = Object.assign(Object.assign({}, enrichedPayload), _this5._getPayloadRecords(postgresChanges));\n          }\n          bind.callback(handledPayload, ref);\n        });\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_isClosed\",\n    value: function _isClosed() {\n      return this.state === CHANNEL_STATES.closed;\n    }\n    /** @internal */\n  }, {\n    key: \"_isJoined\",\n    value: function _isJoined() {\n      return this.state === CHANNEL_STATES.joined;\n    }\n    /** @internal */\n  }, {\n    key: \"_isJoining\",\n    value: function _isJoining() {\n      return this.state === CHANNEL_STATES.joining;\n    }\n    /** @internal */\n  }, {\n    key: \"_isLeaving\",\n    value: function _isLeaving() {\n      return this.state === CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n  }, {\n    key: \"_replyEventName\",\n    value: function _replyEventName(ref) {\n      return \"chan_reply_\".concat(ref);\n    }\n    /** @internal */\n  }, {\n    key: \"_on\",\n    value: function _on(type, filter, callback) {\n      var typeLower = type.toLocaleLowerCase();\n      var binding = {\n        type: typeLower,\n        filter: filter,\n        callback: callback\n      };\n      if (this.bindings[typeLower]) {\n        this.bindings[typeLower].push(binding);\n      } else {\n        this.bindings[typeLower] = [binding];\n      }\n      return this;\n    }\n    /** @internal */\n  }, {\n    key: \"_off\",\n    value: function _off(type, filter) {\n      var typeLower = type.toLocaleLowerCase();\n      this.bindings[typeLower] = this.bindings[typeLower].filter(function (bind) {\n        var _a;\n        return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n      });\n      return this;\n    }\n    /** @internal */\n  }, {\n    key: \"_rejoinUntilConnected\",\n    value: /** @internal */\n    function _rejoinUntilConnected() {\n      this.rejoinTimer.scheduleTimeout();\n      if (this.socket.isConnected()) {\n        this._rejoin();\n      }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onClose\",\n    value: function _onClose(callback) {\n      this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onError\",\n    value: function _onError(callback) {\n      this._on(CHANNEL_EVENTS.error, {}, function (reason) {\n        return callback(reason);\n      });\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_canPush\",\n    value: function _canPush() {\n      return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n  }, {\n    key: \"_rejoin\",\n    value: function _rejoin() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      if (this._isLeaving()) {\n        return;\n      }\n      this.socket._leaveOpenTopic(this.topic);\n      this.state = CHANNEL_STATES.joining;\n      this.joinPush.resend(timeout);\n    }\n    /** @internal */\n  }, {\n    key: \"_getPayloadRecords\",\n    value: function _getPayloadRecords(payload) {\n      var records = {\n        new: {},\n        old: {}\n      };\n      if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n        records.new = Transformers.convertChangeData(payload.columns, payload.record);\n      }\n      if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n        records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n      }\n      return records;\n    }\n  }], [{\n    key: \"isEqual\",\n    value: function isEqual(obj1, obj2) {\n      if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n        return false;\n      }\n      for (var k in obj1) {\n        if (obj1[k] !== obj2[k]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }]);\n  return RealtimeChannel;\n}();\nexport { RealtimeChannel as default };","map":{"version":3,"mappings":"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","names":["CHANNEL_EVENTS","CHANNEL_STATES","Push","Timer","RealtimePresence","Transformers","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","REALTIME_LISTEN_TYPES","REALTIME_SUBSCRIBE_STATES","RealtimeChannel","topic","params","config","socket","closed","broadcast","ack","self","presence","key","timeout","joinPush","join","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","receive","state","joined","reset","pushBuffer","forEach","pushEvent","send","_onClose","log","_joinRef","_remove","_onError","reason","_isLeaving","_isClosed","errored","scheduleTimeout","_isJoining","_on","reply","payload","ref","_trigger","_replyEventName","callback","joinedOnce","e","accessTokenPayload","postgres_changes","bindings","map","r","filter","accessToken","access_token","updateJoinPayload","_rejoin","serverPostgresFilters","setAuth","undefined","clientPostgresBindings","bindingsLen","length","newPostgresBindings","i","clientPostgresBinding","event","schema","table","serverPostgresFilter","push","id","unsubscribe","Error","error","JSON","stringify","Object","values","opts","type","Promise","resolve","_push","rateLimited","updatePayload","leaving","onClose","close","destroy","leavePush","leave","_canPush","trigger","startTimeout","_event","_ref","typeLower","toLocaleLowerCase","events","indexOf","handledPayload","_onMessage","includes","bind","bindId","bindEvent","ids","data","postgresChanges","commit_timestamp","errors","enrichedPayload","eventType","new","old","_getPayloadRecords","joining","binding","isEqual","isConnected","_isJoined","_leaveOpenTopic","resend","records","convertChangeData","columns","record","old_record","obj1","obj2","keys","k"],"sources":["C:\\Users\\zoila\\OneDrive\\Escritorio\\Today-i-learned\\node_modules\\@supabase\\realtime-js\\src\\RealtimeChannel.ts"],"sourcesContent":["import { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants'\nimport Push from './lib/push'\nimport RealtimeClient from './RealtimeClient'\nimport Timer from './lib/timer'\nimport RealtimePresence, {\n  RealtimePresenceJoinPayload,\n  RealtimePresenceLeavePayload,\n  RealtimePresenceState,\n  REALTIME_PRESENCE_LISTEN_EVENTS,\n} from './RealtimePresence'\nimport * as Transformers from './lib/transformers'\n\nexport type RealtimeChannelOptions = {\n  config: {\n    /**\n     * self option enables client to receive message it broadcast\n     * ack option instructs server to acknowlege that broadcast message was received\n     */\n    broadcast?: { self?: boolean; ack?: boolean }\n    /**\n     * key option is used to track presence payload across clients\n     */\n    presence?: { key?: string }\n  }\n}\n\ntype RealtimePostgresChangesPayloadBase = {\n  schema: string\n  table: string\n  commit_timestamp: string\n  errors: string[]\n}\n\nexport type RealtimePostgresInsertPayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`\n    new: T\n    old: {}\n  }\n\nexport type RealtimePostgresUpdatePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`\n    new: T\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresDeletePayload<T extends { [key: string]: any }> =\n  RealtimePostgresChangesPayloadBase & {\n    eventType: `${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`\n    new: {}\n    old: Partial<T>\n  }\n\nexport type RealtimePostgresChangesPayload<T extends { [key: string]: any }> =\n  | RealtimePostgresInsertPayload<T>\n  | RealtimePostgresUpdatePayload<T>\n  | RealtimePostgresDeletePayload<T>\n\nexport type RealtimePostgresChangesFilter<T extends string> = {\n  event: T\n  schema: string\n  table?: string\n  filter?: string\n}\n\nexport type RealtimeChannelSendResponse = 'ok' | 'timed out' | 'rate limited'\n\nexport enum REALTIME_POSTGRES_CHANGES_LISTEN_EVENT {\n  ALL = '*',\n  INSERT = 'INSERT',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n}\n\nexport enum REALTIME_LISTEN_TYPES {\n  BROADCAST = 'broadcast',\n  PRESENCE = 'presence',\n  POSTGRES_CHANGES = 'postgres_changes',\n}\n\nexport enum REALTIME_SUBSCRIBE_STATES {\n  SUBSCRIBED = 'SUBSCRIBED',\n  TIMED_OUT = 'TIMED_OUT',\n  CLOSED = 'CLOSED',\n  CHANNEL_ERROR = 'CHANNEL_ERROR',\n}\n\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nexport default class RealtimeChannel {\n  bindings: {\n    [key: string]: {\n      type: string\n      filter: { [key: string]: any }\n      callback: Function\n      id?: string\n    }[]\n  } = {}\n  timeout: number\n  state = CHANNEL_STATES.closed\n  joinedOnce = false\n  joinPush: Push\n  rejoinTimer: Timer\n  pushBuffer: Push[] = []\n  presence: RealtimePresence\n\n  constructor(\n    /** Topic name can be any string. */\n    public topic: string,\n    public params: RealtimeChannelOptions = { config: {} },\n    public socket: RealtimeClient\n  ) {\n    this.params.config = {\n      ...{\n        broadcast: { ack: false, self: false },\n        presence: { key: '' },\n      },\n      ...params.config,\n    }\n    this.timeout = this.socket.timeout\n    this.joinPush = new Push(\n      this,\n      CHANNEL_EVENTS.join,\n      this.params,\n      this.timeout\n    )\n    this.rejoinTimer = new Timer(\n      () => this._rejoinUntilConnected(),\n      this.socket.reconnectAfterMs\n    )\n    this.joinPush.receive('ok', () => {\n      this.state = CHANNEL_STATES.joined\n      this.rejoinTimer.reset()\n      this.pushBuffer.forEach((pushEvent: Push) => pushEvent.send())\n      this.pushBuffer = []\n    })\n    this._onClose(() => {\n      this.rejoinTimer.reset()\n      this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`)\n      this.state = CHANNEL_STATES.closed\n      this.socket._remove(this)\n    })\n    this._onError((reason: string) => {\n      if (this._isLeaving() || this._isClosed()) {\n        return\n      }\n      this.socket.log('channel', `error ${this.topic}`, reason)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this.joinPush.receive('timeout', () => {\n      if (!this._isJoining()) {\n        return\n      }\n      this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout)\n      this.state = CHANNEL_STATES.errored\n      this.rejoinTimer.scheduleTimeout()\n    })\n    this._on(CHANNEL_EVENTS.reply, {}, (payload: any, ref: string) => {\n      this._trigger(this._replyEventName(ref), payload)\n    })\n\n    this.presence = new RealtimePresence(this)\n  }\n\n  /** Subscribe registers your client with the server */\n  subscribe(\n    callback?: (status: `${REALTIME_SUBSCRIBE_STATES}`, err?: Error) => void,\n    timeout = this.timeout\n  ): RealtimeChannel {\n    if (this.joinedOnce) {\n      throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`\n    } else {\n      const {\n        config: { broadcast, presence },\n      } = this.params\n      this._onError((e: Error) => callback && callback('CHANNEL_ERROR', e))\n      this._onClose(() => callback && callback('CLOSED'))\n\n      const accessTokenPayload: { access_token?: string } = {}\n      const config = {\n        broadcast,\n        presence,\n        postgres_changes:\n          this.bindings.postgres_changes?.map((r) => r.filter) ?? [],\n      }\n\n      if (this.socket.accessToken) {\n        accessTokenPayload.access_token = this.socket.accessToken\n      }\n\n      this.updateJoinPayload({ ...{ config }, ...accessTokenPayload })\n\n      this.joinedOnce = true\n      this._rejoin(timeout)\n\n      this.joinPush\n        .receive(\n          'ok',\n          ({\n            postgres_changes: serverPostgresFilters,\n          }: {\n            postgres_changes: {\n              id: string\n              event: string\n              schema?: string\n              table?: string\n              filter?: string\n            }[]\n          }) => {\n            this.socket.accessToken &&\n              this.socket.setAuth(this.socket.accessToken)\n\n            if (serverPostgresFilters === undefined) {\n              callback && callback('SUBSCRIBED')\n              return\n            } else {\n              const clientPostgresBindings = this.bindings.postgres_changes\n              const bindingsLen = clientPostgresBindings?.length ?? 0\n              const newPostgresBindings = []\n\n              for (let i = 0; i < bindingsLen; i++) {\n                const clientPostgresBinding = clientPostgresBindings[i]\n                const {\n                  filter: { event, schema, table, filter },\n                } = clientPostgresBinding\n                const serverPostgresFilter =\n                  serverPostgresFilters && serverPostgresFilters[i]\n\n                if (\n                  serverPostgresFilter &&\n                  serverPostgresFilter.event === event &&\n                  serverPostgresFilter.schema === schema &&\n                  serverPostgresFilter.table === table &&\n                  serverPostgresFilter.filter === filter\n                ) {\n                  newPostgresBindings.push({\n                    ...clientPostgresBinding,\n                    id: serverPostgresFilter.id,\n                  })\n                } else {\n                  this.unsubscribe()\n                  callback &&\n                    callback(\n                      'CHANNEL_ERROR',\n                      new Error(\n                        'mismatch between server and client bindings for postgres changes'\n                      )\n                    )\n                  return\n                }\n              }\n\n              this.bindings.postgres_changes = newPostgresBindings\n\n              callback && callback('SUBSCRIBED')\n              return\n            }\n          }\n        )\n        .receive('error', (error: { [key: string]: any }) => {\n          callback &&\n            callback(\n              'CHANNEL_ERROR',\n              new Error(\n                JSON.stringify(Object.values(error).join(', ') || 'error')\n              )\n            )\n          return\n        })\n        .receive('timeout', () => {\n          callback && callback('TIMED_OUT')\n          return\n        })\n    }\n\n    return this\n  }\n\n  presenceState(): RealtimePresenceState {\n    return this.presence.state\n  }\n\n  async track(\n    payload: { [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'track',\n        payload,\n      },\n      opts.timeout || this.timeout\n    )\n  }\n\n  async untrack(\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return await this.send(\n      {\n        type: 'presence',\n        event: 'untrack',\n      },\n      opts\n    )\n  }\n\n  /** Listen to messages. */\n  on(\n    type: `${REALTIME_LISTEN_TYPES.BROADCAST}`,\n    filter: { event: string },\n    callback: (payload: {\n      type: `${REALTIME_LISTEN_TYPES.BROADCAST}`\n      event: string\n      [key: string]: any\n    }) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.SYNC}` },\n    callback: () => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}` },\n    callback: (payload: RealtimePresenceJoinPayload) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES.PRESENCE}`,\n    filter: { event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}` },\n    callback: (payload: RealtimePresenceLeavePayload) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.ALL}`>,\n    callback: (payload: RealtimePostgresChangesPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.INSERT}`>,\n    callback: (payload: RealtimePostgresInsertPayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.UPDATE}`>,\n    callback: (payload: RealtimePostgresUpdatePayload<T>) => void\n  ): RealtimeChannel\n  on<T extends { [key: string]: any }>(\n    type: `${REALTIME_LISTEN_TYPES.POSTGRES_CHANGES}`,\n    filter: RealtimePostgresChangesFilter<`${REALTIME_POSTGRES_CHANGES_LISTEN_EVENT.DELETE}`>,\n    callback: (payload: RealtimePostgresDeletePayload<T>) => void\n  ): RealtimeChannel\n  on(\n    type: `${REALTIME_LISTEN_TYPES}`,\n    filter: { event: string; [key: string]: string },\n    callback: (payload: any) => void\n  ): RealtimeChannel {\n    return this._on(type, filter, callback)\n  }\n\n  send(\n    payload: { type: string; [key: string]: any },\n    opts: { [key: string]: any } = {}\n  ): Promise<RealtimeChannelSendResponse> {\n    return new Promise((resolve) => {\n      const push = this._push(\n        payload.type,\n        payload,\n        opts.timeout || this.timeout\n      )\n\n      if (push.rateLimited) {\n        resolve('rate limited')\n      }\n\n      if (\n        payload.type === 'broadcast' &&\n        !this.params?.config?.broadcast?.ack\n      ) {\n        resolve('ok')\n      }\n\n      push.receive('ok', () => resolve('ok'))\n      push.receive('timeout', () => resolve('timed out'))\n    })\n  }\n\n  updateJoinPayload(payload: { [key: string]: any }): void {\n    this.joinPush.updatePayload(payload)\n  }\n\n  /**\n   * Leaves the channel.\n   *\n   * Unsubscribes from server events, and instructs channel to terminate on server.\n   * Triggers onClose() hooks.\n   *\n   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n   * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n   */\n  unsubscribe(timeout = this.timeout): Promise<'ok' | 'timed out' | 'error'> {\n    this.state = CHANNEL_STATES.leaving\n    const onClose = () => {\n      this.socket.log('channel', `leave ${this.topic}`)\n      this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef())\n    }\n\n    this.rejoinTimer.reset()\n    // Destroy joinPush to avoid connection timeouts during unscription phase\n    this.joinPush.destroy()\n\n    return new Promise((resolve) => {\n      const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout)\n\n      leavePush\n        .receive('ok', () => {\n          onClose()\n          resolve('ok')\n        })\n        .receive('timeout', () => {\n          onClose()\n          resolve('timed out')\n        })\n        .receive('error', () => {\n          resolve('error')\n        })\n\n      leavePush.send()\n\n      if (!this._canPush()) {\n        leavePush.trigger('ok', {})\n      }\n    })\n  }\n\n  /** @internal */\n  _push(\n    event: string,\n    payload: { [key: string]: any },\n    timeout = this.timeout\n  ) {\n    if (!this.joinedOnce) {\n      throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`\n    }\n    let pushEvent = new Push(this, event, payload, timeout)\n    if (this._canPush()) {\n      pushEvent.send()\n    } else {\n      pushEvent.startTimeout()\n      this.pushBuffer.push(pushEvent)\n    }\n\n    return pushEvent\n  }\n\n  /**\n   * Overridable message hook\n   *\n   * Receives all events for specialized message handling before dispatching to the channel callbacks.\n   * Must return the payload, modified or unmodified.\n   *\n   * @internal\n   */\n  _onMessage(_event: string, payload: any, _ref?: string) {\n    return payload\n  }\n\n  /** @internal */\n  _isMember(topic: string): boolean {\n    return this.topic === topic\n  }\n\n  /** @internal */\n  _joinRef(): string {\n    return this.joinPush.ref\n  }\n\n  /** @internal */\n  _trigger(type: string, payload?: any, ref?: string) {\n    const typeLower = type.toLocaleLowerCase()\n    const { close, error, leave, join } = CHANNEL_EVENTS\n    const events: string[] = [close, error, leave, join]\n    if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n      return\n    }\n    let handledPayload = this._onMessage(typeLower, payload, ref)\n    if (payload && !handledPayload) {\n      throw 'channel onMessage callbacks must return the payload, modified or unmodified'\n    }\n\n    if (['insert', 'update', 'delete'].includes(typeLower)) {\n      this.bindings.postgres_changes\n        ?.filter((bind) => {\n          return (\n            bind.filter?.event === '*' ||\n            bind.filter?.event?.toLocaleLowerCase() === typeLower\n          )\n        })\n        .map((bind) => bind.callback(handledPayload, ref))\n    } else {\n      this.bindings[typeLower]\n        ?.filter((bind) => {\n          if (\n            ['broadcast', 'presence', 'postgres_changes'].includes(typeLower)\n          ) {\n            if ('id' in bind) {\n              const bindId = bind.id\n              const bindEvent = bind.filter?.event\n              return (\n                bindId &&\n                payload.ids?.includes(bindId) &&\n                (bindEvent === '*' ||\n                  bindEvent?.toLocaleLowerCase() ===\n                    payload.data?.type.toLocaleLowerCase())\n              )\n            } else {\n              const bindEvent = bind?.filter?.event?.toLocaleLowerCase()\n              return (\n                bindEvent === '*' ||\n                bindEvent === payload?.event?.toLocaleLowerCase()\n              )\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower\n          }\n        })\n        .map((bind) => {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            const postgresChanges = handledPayload.data\n            const { schema, table, commit_timestamp, type, errors } =\n              postgresChanges\n            const enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: type,\n              new: {},\n              old: {},\n              errors: errors,\n            }\n            handledPayload = {\n              ...enrichedPayload,\n              ...this._getPayloadRecords(postgresChanges),\n            }\n          }\n          bind.callback(handledPayload, ref)\n        })\n    }\n  }\n\n  /** @internal */\n  _isClosed(): boolean {\n    return this.state === CHANNEL_STATES.closed\n  }\n\n  /** @internal */\n  _isJoined(): boolean {\n    return this.state === CHANNEL_STATES.joined\n  }\n\n  /** @internal */\n  _isJoining(): boolean {\n    return this.state === CHANNEL_STATES.joining\n  }\n\n  /** @internal */\n  _isLeaving(): boolean {\n    return this.state === CHANNEL_STATES.leaving\n  }\n\n  /** @internal */\n  _replyEventName(ref: string): string {\n    return `chan_reply_${ref}`\n  }\n\n  /** @internal */\n  _on(type: string, filter: { [key: string]: any }, callback: Function) {\n    const typeLower = type.toLocaleLowerCase()\n\n    const binding = {\n      type: typeLower,\n      filter: filter,\n      callback: callback,\n    }\n\n    if (this.bindings[typeLower]) {\n      this.bindings[typeLower].push(binding)\n    } else {\n      this.bindings[typeLower] = [binding]\n    }\n\n    return this\n  }\n\n  /** @internal */\n  _off(type: string, filter: { [key: string]: any }) {\n    const typeLower = type.toLocaleLowerCase()\n\n    this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n      return !(\n        bind.type?.toLocaleLowerCase() === typeLower &&\n        RealtimeChannel.isEqual(bind.filter, filter)\n      )\n    })\n    return this\n  }\n\n  /** @internal */\n  private static isEqual(\n    obj1: { [key: string]: string },\n    obj2: { [key: string]: string }\n  ) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n      return false\n    }\n\n    for (const k in obj1) {\n      if (obj1[k] !== obj2[k]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /** @internal */\n  private _rejoinUntilConnected() {\n    this.rejoinTimer.scheduleTimeout()\n    if (this.socket.isConnected()) {\n      this._rejoin()\n    }\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel closes.\n   *\n   * @internal\n   */\n  private _onClose(callback: Function) {\n    this._on(CHANNEL_EVENTS.close, {}, callback)\n  }\n\n  /**\n   * Registers a callback that will be executed when the channel encounteres an error.\n   *\n   * @internal\n   */\n  private _onError(callback: Function) {\n    this._on(CHANNEL_EVENTS.error, {}, (reason: string) => callback(reason))\n  }\n\n  /**\n   * Returns `true` if the socket is connected and the channel has been joined.\n   *\n   * @internal\n   */\n  private _canPush(): boolean {\n    return this.socket.isConnected() && this._isJoined()\n  }\n\n  /** @internal */\n  private _rejoin(timeout = this.timeout): void {\n    if (this._isLeaving()) {\n      return\n    }\n    this.socket._leaveOpenTopic(this.topic)\n    this.state = CHANNEL_STATES.joining\n    this.joinPush.resend(timeout)\n  }\n\n  /** @internal */\n  private _getPayloadRecords(payload: any) {\n    const records = {\n      new: {},\n      old: {},\n    }\n\n    if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n      records.new = Transformers.convertChangeData(\n        payload.columns,\n        payload.record\n      )\n    }\n\n    if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n      records.old = Transformers.convertChangeData(\n        payload.columns,\n        payload.old_record\n      )\n    }\n\n    return records\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}