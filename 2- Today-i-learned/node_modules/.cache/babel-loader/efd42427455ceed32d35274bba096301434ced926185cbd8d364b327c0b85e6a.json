{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport crossFetch from 'cross-fetch';\nvar PostgrestBuilder = /*#__PURE__*/function () {\n  function PostgrestBuilder(builder) {\n    _classCallCheck(this, PostgrestBuilder);\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.allowEmpty = builder.allowEmpty;\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  _createClass(PostgrestBuilder, [{\n    key: \"throwOnError\",\n    value: function throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(onfulfilled, onrejected) {\n      var _this = this;\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (this.schema === undefined) {\n        // skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers['Accept-Profile'] = this.schema;\n      } else {\n        this.headers['Content-Profile'] = this.schema;\n      }\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers['Content-Type'] = 'application/json';\n      }\n      // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n      // https://github.com/supabase/postgrest-js/pull/247\n      var _fetch = this.fetch;\n      var res = _fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then(function (res) {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _a, _b, _c, error, data, count, status, statusText, body, countHeader, contentRange, _body, postgrestResponse;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  error = null;\n                  data = null;\n                  count = null;\n                  status = res.status;\n                  statusText = res.statusText;\n                  if (!res.ok) {\n                    _context.next = 16;\n                    break;\n                  }\n                  if (!(this.method !== 'HEAD')) {\n                    _context.next = 11;\n                    break;\n                  }\n                  _context.next = 9;\n                  return res.text();\n                case 9:\n                  body = _context.sent;\n                  if (body === '') {\n                    // Prefer: return=minimal\n                  } else if (this.headers['Accept'] === 'text/csv') {\n                    data = body;\n                  } else if (this.headers['Accept'] && this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                    data = body;\n                  } else {\n                    data = JSON.parse(body);\n                  }\n                case 11:\n                  countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                  contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                  if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                  }\n                  _context.next = 23;\n                  break;\n                case 16:\n                  _context.next = 18;\n                  return res.text();\n                case 18:\n                  _body = _context.sent;\n                  try {\n                    error = JSON.parse(_body);\n                  } catch (_d) {\n                    error = {\n                      message: _body\n                    };\n                  }\n                  if (error && this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                  }\n                  if (!(error && this.shouldThrowOnError)) {\n                    _context.next = 23;\n                    break;\n                  }\n                  throw error;\n                case 23:\n                  postgrestResponse = {\n                    error: error,\n                    data: data,\n                    count: count,\n                    status: status,\n                    statusText: statusText\n                  };\n                  return _context.abrupt(\"return\", postgrestResponse);\n                case 25:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      });\n      if (!this.shouldThrowOnError) {\n        res = res.catch(function (fetchError) {\n          return {\n            error: {\n              message: \"FetchError: \".concat(fetchError.message),\n              details: '',\n              hint: '',\n              code: fetchError.code || ''\n            },\n            data: null,\n            count: null,\n            status: 0,\n            statusText: ''\n          };\n        });\n      }\n      return res.then(onfulfilled, onrejected);\n    }\n  }]);\n  return PostgrestBuilder;\n}();\nexport { PostgrestBuilder as default };","map":{"version":3,"mappings":"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","names":["crossFetch","PostgrestBuilder","builder","method","url","headers","schema","body","shouldThrowOnError","signal","allowEmpty","fetch","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","then","__awaiter","error","data","count","status","statusText","ok","text","parse","countHeader","match","contentRange","get","split","length","parseInt","message","details","postgrestResponse","catch","fetchError","hint","code"],"sources":["C:\\Users\\zoila\\OneDrive\\Escritorio\\Today-i-learned\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestBuilder.ts"],"sourcesContent":["import crossFetch from 'cross-fetch'\n\nimport type { Fetch, PostgrestResponse } from './types'\n\nexport default abstract class PostgrestBuilder<Result>\n  implements PromiseLike<PostgrestResponse<Result>>\n{\n  protected method: 'GET' | 'HEAD' | 'POST' | 'PATCH' | 'DELETE'\n  protected url: URL\n  protected headers: Record<string, string>\n  protected schema?: string\n  protected body?: unknown\n  protected shouldThrowOnError = false\n  protected signal?: AbortSignal\n  protected fetch: Fetch\n  protected allowEmpty: boolean\n\n  constructor(builder: PostgrestBuilder<Result>) {\n    this.method = builder.method\n    this.url = builder.url\n    this.headers = builder.headers\n    this.schema = builder.schema\n    this.body = builder.body\n    this.shouldThrowOnError = builder.shouldThrowOnError\n    this.signal = builder.signal\n    this.allowEmpty = builder.allowEmpty\n\n    if (builder.fetch) {\n      this.fetch = builder.fetch\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch\n    } else {\n      this.fetch = fetch\n    }\n  }\n\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  throwOnError(): this {\n    this.shouldThrowOnError = true\n    return this\n  }\n\n  then<TResult1 = PostgrestResponse<Result>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: PostgrestResponse<Result>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null\n  ): PromiseLike<TResult1 | TResult2> {\n    // https://postgrest.org/en/stable/api.html#switching-schemas\n    if (this.schema === undefined) {\n      // skip\n    } else if (['GET', 'HEAD'].includes(this.method)) {\n      this.headers['Accept-Profile'] = this.schema\n    } else {\n      this.headers['Content-Profile'] = this.schema\n    }\n    if (this.method !== 'GET' && this.method !== 'HEAD') {\n      this.headers['Content-Type'] = 'application/json'\n    }\n\n    // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n    // https://github.com/supabase/postgrest-js/pull/247\n    const _fetch = this.fetch\n    let res = _fetch(this.url.toString(), {\n      method: this.method,\n      headers: this.headers,\n      body: JSON.stringify(this.body),\n      signal: this.signal,\n    }).then(async (res) => {\n      let error = null\n      let data = null\n      let count: number | null = null\n      let status = res.status\n      let statusText = res.statusText\n\n      if (res.ok) {\n        if (this.method !== 'HEAD') {\n          const body = await res.text()\n          if (body === '') {\n            // Prefer: return=minimal\n          } else if (this.headers['Accept'] === 'text/csv') {\n            data = body\n          } else if (\n            this.headers['Accept'] &&\n            this.headers['Accept'].includes('application/vnd.pgrst.plan+text')\n          ) {\n            data = body\n          } else {\n            data = JSON.parse(body)\n          }\n        }\n\n        const countHeader = this.headers['Prefer']?.match(/count=(exact|planned|estimated)/)\n        const contentRange = res.headers.get('content-range')?.split('/')\n        if (countHeader && contentRange && contentRange.length > 1) {\n          count = parseInt(contentRange[1])\n        }\n      } else {\n        const body = await res.text()\n\n        try {\n          error = JSON.parse(body)\n        } catch {\n          error = {\n            message: body,\n          }\n        }\n\n        if (error && this.allowEmpty && error?.details?.includes('Results contain 0 rows')) {\n          error = null\n          status = 200\n          statusText = 'OK'\n        }\n\n        if (error && this.shouldThrowOnError) {\n          throw error\n        }\n      }\n\n      const postgrestResponse = {\n        error,\n        data,\n        count,\n        status,\n        statusText,\n      }\n\n      return postgrestResponse\n    })\n    if (!this.shouldThrowOnError) {\n      res = res.catch((fetchError) => ({\n        error: {\n          message: `FetchError: ${fetchError.message}`,\n          details: '',\n          hint: '',\n          code: fetchError.code || '',\n        },\n        data: null,\n        count: null,\n        status: 0,\n        statusText: '',\n      }))\n    }\n\n    return res.then(onfulfilled, onrejected)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}