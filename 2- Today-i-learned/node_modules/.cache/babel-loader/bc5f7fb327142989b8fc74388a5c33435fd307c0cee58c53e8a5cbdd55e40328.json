{"ast":null,"code":"import _toConsumableArray from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nvar RealtimePresence = /*#__PURE__*/function () {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  function RealtimePresence(channel, opts) {\n    var _this = this;\n    _classCallCheck(this, RealtimePresence);\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: function onJoin() {},\n      onLeave: function onLeave() {},\n      onSync: function onSync() {}\n    };\n    var events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n    this.channel._on(events.state, {}, function (newState) {\n      var _this$caller = _this.caller,\n        onJoin = _this$caller.onJoin,\n        onLeave = _this$caller.onLeave,\n        onSync = _this$caller.onSync;\n      _this.joinRef = _this.channel._joinRef();\n      _this.state = RealtimePresence.syncState(_this.state, newState, onJoin, onLeave);\n      _this.pendingDiffs.forEach(function (diff) {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n      });\n      _this.pendingDiffs = [];\n      onSync();\n    });\n    this.channel._on(events.diff, {}, function (diff) {\n      var _this$caller2 = _this.caller,\n        onJoin = _this$caller2.onJoin,\n        onLeave = _this$caller2.onLeave,\n        onSync = _this$caller2.onSync;\n      if (_this.inPendingSyncState()) {\n        _this.pendingDiffs.push(diff);\n      } else {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n    this.onJoin(function (key, currentPresences, newPresences) {\n      _this.channel._trigger('presence', {\n        event: 'join',\n        key: key,\n        currentPresences: currentPresences,\n        newPresences: newPresences\n      });\n    });\n    this.onLeave(function (key, currentPresences, leftPresences) {\n      _this.channel._trigger('presence', {\n        event: 'leave',\n        key: key,\n        currentPresences: currentPresences,\n        leftPresences: leftPresences\n      });\n    });\n    this.onSync(function () {\n      _this.channel._trigger('presence', {\n        event: 'sync'\n      });\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  _createClass(RealtimePresence, [{\n    key: \"onJoin\",\n    value: /** @internal */\n    function onJoin(callback) {\n      this.caller.onJoin = callback;\n    }\n    /** @internal */\n  }, {\n    key: \"onLeave\",\n    value: function onLeave(callback) {\n      this.caller.onLeave = callback;\n    }\n    /** @internal */\n  }, {\n    key: \"onSync\",\n    value: function onSync(callback) {\n      this.caller.onSync = callback;\n    }\n    /** @internal */\n  }, {\n    key: \"inPendingSyncState\",\n    value: function inPendingSyncState() {\n      return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n  }], [{\n    key: \"syncState\",\n    value: function syncState(currentState, newState, onJoin, onLeave) {\n      var state = this.cloneDeep(currentState);\n      var transformedState = this.transformState(newState);\n      var joins = {};\n      var leaves = {};\n      this.map(state, function (key, presences) {\n        if (!transformedState[key]) {\n          leaves[key] = presences;\n        }\n      });\n      this.map(transformedState, function (key, newPresences) {\n        var currentPresences = state[key];\n        if (currentPresences) {\n          var newPresenceRefs = newPresences.map(function (m) {\n            return m.presence_ref;\n          });\n          var curPresenceRefs = currentPresences.map(function (m) {\n            return m.presence_ref;\n          });\n          var joinedPresences = newPresences.filter(function (m) {\n            return curPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          var leftPresences = currentPresences.filter(function (m) {\n            return newPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          if (joinedPresences.length > 0) {\n            joins[key] = joinedPresences;\n          }\n          if (leftPresences.length > 0) {\n            leaves[key] = leftPresences;\n          }\n        } else {\n          joins[key] = newPresences;\n        }\n      });\n      return this.syncDiff(state, {\n        joins: joins,\n        leaves: leaves\n      }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n  }, {\n    key: \"syncDiff\",\n    value: function syncDiff(state, diff, onJoin, onLeave) {\n      var _this2 = this;\n      var _joins$leaves = {\n          joins: this.transformState(diff.joins),\n          leaves: this.transformState(diff.leaves)\n        },\n        joins = _joins$leaves.joins,\n        leaves = _joins$leaves.leaves;\n      if (!onJoin) {\n        onJoin = function onJoin() {};\n      }\n      if (!onLeave) {\n        onLeave = function onLeave() {};\n      }\n      this.map(joins, function (key, newPresences) {\n        var _a;\n        var currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n        state[key] = _this2.cloneDeep(newPresences);\n        if (currentPresences.length > 0) {\n          var _state$key;\n          var joinedPresenceRefs = state[key].map(function (m) {\n            return m.presence_ref;\n          });\n          var curPresences = currentPresences.filter(function (m) {\n            return joinedPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          (_state$key = state[key]).unshift.apply(_state$key, _toConsumableArray(curPresences));\n        }\n        onJoin(key, currentPresences, newPresences);\n      });\n      this.map(leaves, function (key, leftPresences) {\n        var currentPresences = state[key];\n        if (!currentPresences) return;\n        var presenceRefsToRemove = leftPresences.map(function (m) {\n          return m.presence_ref;\n        });\n        currentPresences = currentPresences.filter(function (m) {\n          return presenceRefsToRemove.indexOf(m.presence_ref) < 0;\n        });\n        state[key] = currentPresences;\n        onLeave(key, currentPresences, leftPresences);\n        if (currentPresences.length === 0) delete state[key];\n      });\n      return state;\n    }\n    /** @internal */\n  }, {\n    key: \"map\",\n    value: function map(obj, func) {\n      return Object.getOwnPropertyNames(obj).map(function (key) {\n        return func(key, obj[key]);\n      });\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n  }, {\n    key: \"transformState\",\n    value: function transformState(state) {\n      state = this.cloneDeep(state);\n      return Object.getOwnPropertyNames(state).reduce(function (newState, key) {\n        var presences = state[key];\n        if ('metas' in presences) {\n          newState[key] = presences.metas.map(function (presence) {\n            presence['presence_ref'] = presence['phx_ref'];\n            delete presence['phx_ref'];\n            delete presence['phx_ref_prev'];\n            return presence;\n          });\n        } else {\n          newState[key] = presences;\n        }\n        return newState;\n      }, {});\n    }\n    /** @internal */\n  }, {\n    key: \"cloneDeep\",\n    value: function cloneDeep(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }]);\n  return RealtimePresence;\n}();\nexport { RealtimePresence as default };","map":{"version":3,"mappings":"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","names":["REALTIME_PRESENCE_LISTEN_EVENTS","RealtimePresence","channel","opts","onJoin","onLeave","onSync","events","state","diff","_on","newState","caller","joinRef","_joinRef","syncState","pendingDiffs","forEach","syncDiff","inPendingSyncState","push","key","currentPresences","newPresences","_trigger","event","leftPresences","callback","currentState","cloneDeep","transformedState","transformState","joins","leaves","map","presences","newPresenceRefs","m","presence_ref","curPresenceRefs","joinedPresences","filter","indexOf","length","joinedPresenceRefs","curPresences","unshift","presenceRefsToRemove","obj","func","Object","getOwnPropertyNames","reduce","metas","presence","JSON","parse","stringify"],"sources":["C:\\Users\\zoila\\OneDrive\\Escritorio\\Today-i-learned\\node_modules\\@supabase\\realtime-js\\src\\RealtimePresence.ts"],"sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\n\nimport {\n  PresenceOpts,\n  PresenceOnJoinCallback,\n  PresenceOnLeaveCallback,\n} from 'phoenix'\nimport RealtimeChannel from './RealtimeChannel'\n\ntype Presence = {\n  presence_ref: string\n  [key: string]: any\n}\n\nexport type RealtimePresenceState = { [key: string]: Presence[] }\n\nexport type RealtimePresenceJoinPayload = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.JOIN}`\n  key: string\n  currentPresences: Presence[]\n  newPresences: Presence[]\n}\n\nexport type RealtimePresenceLeavePayload = {\n  event: `${REALTIME_PRESENCE_LISTEN_EVENTS.LEAVE}`\n  key: string\n  currentPresences: Presence[]\n  leftPresences: Presence[]\n}\n\nexport enum REALTIME_PRESENCE_LISTEN_EVENTS {\n  SYNC = 'sync',\n  JOIN = 'join',\n  LEAVE = 'leave',\n}\n\ntype PresenceDiff = {\n  joins: RealtimePresenceState\n  leaves: RealtimePresenceState\n}\n\ntype RawPresenceState = {\n  [key: string]: {\n    metas: {\n      phx_ref?: string\n      phx_ref_prev?: string\n      [key: string]: any\n    }[]\n  }\n}\n\ntype RawPresenceDiff = {\n  joins: RawPresenceState\n  leaves: RawPresenceState\n}\n\ntype PresenceChooser<T> = (key: string, presences: Presence[]) => T\n\nexport default class RealtimePresence {\n  state: RealtimePresenceState = {}\n  pendingDiffs: RawPresenceDiff[] = []\n  joinRef: string | null = null\n  caller: {\n    onJoin: PresenceOnJoinCallback\n    onLeave: PresenceOnLeaveCallback\n    onSync: () => void\n  } = {\n    onJoin: () => {},\n    onLeave: () => {},\n    onSync: () => {},\n  }\n\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(public channel: RealtimeChannel, opts?: PresenceOpts) {\n    const events = opts?.events || {\n      state: 'presence_state',\n      diff: 'presence_diff',\n    }\n\n    this.channel._on(events.state, {}, (newState: RawPresenceState) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      this.joinRef = this.channel._joinRef()\n\n      this.state = RealtimePresence.syncState(\n        this.state,\n        newState,\n        onJoin,\n        onLeave\n      )\n\n      this.pendingDiffs.forEach((diff) => {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n      })\n\n      this.pendingDiffs = []\n\n      onSync()\n    })\n\n    this.channel._on(events.diff, {}, (diff: RawPresenceDiff) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff)\n      } else {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n\n        onSync()\n      }\n    })\n\n    this.onJoin((key, currentPresences, newPresences) => {\n      this.channel._trigger('presence', {\n        event: 'join',\n        key,\n        currentPresences,\n        newPresences,\n      })\n    })\n\n    this.onLeave((key, currentPresences, leftPresences) => {\n      this.channel._trigger('presence', {\n        event: 'leave',\n        key,\n        currentPresences,\n        leftPresences,\n      })\n    })\n\n    this.onSync(() => {\n      this.channel._trigger('presence', { event: 'sync' })\n    })\n  }\n\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  private static syncState(\n    currentState: RealtimePresenceState,\n    newState: RawPresenceState | RealtimePresenceState,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const state = this.cloneDeep(currentState)\n    const transformedState = this.transformState(newState)\n    const joins: RealtimePresenceState = {}\n    const leaves: RealtimePresenceState = {}\n\n    this.map(state, (key: string, presences: Presence[]) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences\n      }\n    })\n\n    this.map(transformedState, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n\n      if (currentPresences) {\n        const newPresenceRefs = newPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresenceRefs = currentPresences.map(\n          (m: Presence) => m.presence_ref\n        )\n        const joinedPresences: Presence[] = newPresences.filter(\n          (m: Presence) => curPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n        const leftPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => newPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences\n        }\n      } else {\n        joins[key] = newPresences\n      }\n    })\n\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\n  }\n\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   *\n   * @internal\n   */\n  private static syncDiff(\n    state: RealtimePresenceState,\n    diff: RawPresenceDiff | PresenceDiff,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): RealtimePresenceState {\n    const { joins, leaves } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves),\n    }\n\n    if (!onJoin) {\n      onJoin = () => {}\n    }\n\n    if (!onLeave) {\n      onLeave = () => {}\n    }\n\n    this.map(joins, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key] ?? []\n      state[key] = this.cloneDeep(newPresences)\n\n      if (currentPresences.length > 0) {\n        const joinedPresenceRefs = state[key].map(\n          (m: Presence) => m.presence_ref\n        )\n        const curPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => joinedPresenceRefs.indexOf(m.presence_ref) < 0\n        )\n\n        state[key].unshift(...curPresences)\n      }\n\n      onJoin(key, currentPresences, newPresences)\n    })\n\n    this.map(leaves, (key, leftPresences: Presence[]) => {\n      let currentPresences: Presence[] = state[key]\n\n      if (!currentPresences) return\n\n      const presenceRefsToRemove = leftPresences.map(\n        (m: Presence) => m.presence_ref\n      )\n      currentPresences = currentPresences.filter(\n        (m: Presence) => presenceRefsToRemove.indexOf(m.presence_ref) < 0\n      )\n\n      state[key] = currentPresences\n\n      onLeave(key, currentPresences, leftPresences)\n\n      if (currentPresences.length === 0) delete state[key]\n    })\n\n    return state\n  }\n\n  /** @internal */\n  private static map<T = any>(\n    obj: RealtimePresenceState,\n    func: PresenceChooser<T>\n  ): T[] {\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\n  }\n\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_ref'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_ref: '2', user_id: 1 },\n   *    { presence_ref: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   *\n   * @internal\n   */\n  private static transformState(\n    state: RawPresenceState | RealtimePresenceState\n  ): RealtimePresenceState {\n    state = this.cloneDeep(state)\n\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key]\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map((presence) => {\n          presence['presence_ref'] = presence['phx_ref']\n\n          delete presence['phx_ref']\n          delete presence['phx_ref_prev']\n\n          return presence\n        }) as Presence[]\n      } else {\n        newState[key] = presences\n      }\n\n      return newState\n    }, {} as RealtimePresenceState)\n  }\n\n  /** @internal */\n  private static cloneDeep(obj: { [key: string]: any }) {\n    return JSON.parse(JSON.stringify(obj))\n  }\n\n  /** @internal */\n  private onJoin(callback: PresenceOnJoinCallback): void {\n    this.caller.onJoin = callback\n  }\n\n  /** @internal */\n  private onLeave(callback: PresenceOnLeaveCallback): void {\n    this.caller.onLeave = callback\n  }\n\n  /** @internal */\n  private onSync(callback: () => void): void {\n    this.caller.onSync = callback\n  }\n\n  /** @internal */\n  private inPendingSyncState(): boolean {\n    return !this.joinRef || this.joinRef !== this.channel._joinRef()\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}