{"ast":null,"code":"import _classCallCheck from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport PostgrestBuilder from './PostgrestBuilder';\nvar PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestTransformBuilder, _PostgrestBuilder);\n  var _super = _createSuper(PostgrestTransformBuilder);\n  function PostgrestTransformBuilder() {\n    _classCallCheck(this, PostgrestTransformBuilder);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PostgrestTransformBuilder, [{\n    key: \"select\",\n    value:\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    function select(columns) {\n      // Remove whitespaces except when quoted\n      var quoted = false;\n      var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      if (this.headers['Prefer']) {\n        this.headers['Prefer'] += ',';\n      }\n      this.headers['Prefer'] += 'return=representation';\n      return this;\n    }\n  }, {\n    key: \"order\",\n    value: function order(column) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$ascending = _ref.ascending,\n        ascending = _ref$ascending === void 0 ? true : _ref$ascending,\n        nullsFirst = _ref.nullsFirst,\n        foreignTable = _ref.foreignTable;\n      var key = foreignTable ? \"\".concat(foreignTable, \".order\") : 'order';\n      var existingOrder = this.url.searchParams.get(key);\n      this.url.searchParams.set(key, \"\".concat(existingOrder ? \"\".concat(existingOrder, \",\") : '').concat(column, \".\").concat(ascending ? 'asc' : 'desc').concat(nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'));\n      return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(count) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        foreignTable = _ref2.foreignTable;\n      var key = typeof foreignTable === 'undefined' ? 'limit' : \"\".concat(foreignTable, \".limit\");\n      this.url.searchParams.set(key, \"\".concat(count));\n      return this;\n    }\n    /**\n     * Limit the query result by `from` and `to` inclusively.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.foreignTable - Set this to limit rows of foreign tables\n     * instead of the current table\n     */\n  }, {\n    key: \"range\",\n    value: function range(from, to) {\n      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        foreignTable = _ref3.foreignTable;\n      var keyOffset = typeof foreignTable === 'undefined' ? 'offset' : \"\".concat(foreignTable, \".offset\");\n      var keyLimit = typeof foreignTable === 'undefined' ? 'limit' : \"\".concat(foreignTable, \".limit\");\n      this.url.searchParams.set(keyOffset, \"\".concat(from));\n      // Range is inclusive, so add 1\n      this.url.searchParams.set(keyLimit, \"\".concat(to - from + 1));\n      return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n  }, {\n    key: \"abortSignal\",\n    value: function abortSignal(signal) {\n      this.signal = signal;\n      return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n  }, {\n    key: \"single\",\n    value: function single() {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n  }, {\n    key: \"maybeSingle\",\n    value: function maybeSingle() {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      this.allowEmpty = true;\n      return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n  }, {\n    key: \"csv\",\n    value: function csv() {\n      this.headers['Accept'] = 'text/csv';\n      return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n  }, {\n    key: \"geojson\",\n    value: function geojson() {\n      this.headers['Accept'] = 'application/geo+json';\n      return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n  }, {\n    key: \"explain\",\n    value: function explain() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref4$analyze = _ref4.analyze,\n        analyze = _ref4$analyze === void 0 ? false : _ref4$analyze,\n        _ref4$verbose = _ref4.verbose,\n        verbose = _ref4$verbose === void 0 ? false : _ref4$verbose,\n        _ref4$settings = _ref4.settings,\n        settings = _ref4$settings === void 0 ? false : _ref4$settings,\n        _ref4$buffers = _ref4.buffers,\n        buffers = _ref4$buffers === void 0 ? false : _ref4$buffers,\n        _ref4$wal = _ref4.wal,\n        wal = _ref4$wal === void 0 ? false : _ref4$wal,\n        _ref4$format = _ref4.format,\n        format = _ref4$format === void 0 ? 'text' : _ref4$format;\n      var options = [analyze ? 'analyze' : null, verbose ? 'verbose' : null, settings ? 'settings' : null, buffers ? 'buffers' : null, wal ? 'wal' : null].filter(Boolean).join('|');\n      // An Accept header can carry multiple media types but postgrest-js always sends one\n      var forMediatype = this.headers['Accept'];\n      this.headers['Accept'] = \"application/vnd.pgrst.plan+\".concat(format, \"; for=\\\"\").concat(forMediatype, \"\\\"; options=\").concat(options, \";\");\n      if (format === 'json') return this;else return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n  }, {\n    key: \"rollback\",\n    value: function rollback() {\n      var _a;\n      if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n        this.headers['Prefer'] += ',tx=rollback';\n      } else {\n        this.headers['Prefer'] = 'tx=rollback';\n      }\n      return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     */\n  }, {\n    key: \"returns\",\n    value: function returns() {\n      return this;\n    }\n  }]);\n  return PostgrestTransformBuilder;\n}(PostgrestBuilder);\nexport { PostgrestTransformBuilder as default };","map":{"version":3,"mappings":"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","names":["PostgrestBuilder","PostgrestTransformBuilder","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","column","ascending","nullsFirst","foreignTable","key","existingOrder","get","undefined","count","from","to","keyOffset","keyLimit","signal","allowEmpty","analyze","verbose","settings","buffers","wal","format","options","filter","Boolean","forMediatype","trim","length"],"sources":["C:\\Users\\zoila\\OneDrive\\Escritorio\\Today-i-learned\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestTransformBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\nimport { GetResult } from './select-query-parser'\nimport {\n  GenericSchema,\n  PostgrestMaybeSingleResponse,\n  PostgrestResponse,\n  PostgrestSingleResponse,\n} from './types'\n\nexport default class PostgrestTransformBuilder<\n  Schema extends GenericSchema,\n  Row extends Record<string, unknown>,\n  Result\n> extends PostgrestBuilder<Result> {\n  /**\n   * Perform a SELECT on the query result.\n   *\n   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n   * return modified rows. By calling this method, modified rows are returned in\n   * `data`.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   */\n  select<Query extends string = '*', NewResult = GetResult<Schema, Row, Query>>(\n    columns?: Query\n  ): PostgrestTransformBuilder<Schema, Row, NewResult> {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (this.headers['Prefer']) {\n      this.headers['Prefer'] += ','\n    }\n    this.headers['Prefer'] += 'return=representation'\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult>\n  }\n\n  /**\n   * Order the query result by `column`.\n   *\n   * You can call this method multiple times to order by multiple columns.\n   *\n   * You can order foreign tables, but it doesn't affect the ordering of the\n   * current table.\n   *\n   * @param column - The column to order by\n   * @param options - Named parameters\n   * @param options.ascending - If `true`, the result will be in ascending order\n   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n   * `null`s appear last.\n   * @param options.foreignTable - Set this to order a foreign table by foreign\n   * columns\n   */\n  order<ColumnName extends string & keyof Row>(\n    column: ColumnName,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: undefined }\n  ): this\n  order(\n    column: string,\n    options?: { ascending?: boolean; nullsFirst?: boolean; foreignTable: string }\n  ): this\n  order(\n    column: string,\n    {\n      ascending = true,\n      nullsFirst,\n      foreignTable,\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\n  ): this {\n    const key = foreignTable ? `${foreignTable}.order` : 'order'\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${\n        nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limit the query result by `count`.\n   *\n   * @param count - The maximum number of rows to return\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limit the query result by `from` and `to` inclusively.\n   *\n   * @param from - The starting index from which to limit the result\n   * @param to - The last index to which to limit the result\n   * @param options - Named parameters\n   * @param options.foreignTable - Set this to limit rows of foreign tables\n   * instead of the current table\n   */\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Set the AbortSignal for the fetch request.\n   *\n   * @param signal - The AbortSignal to use for the fetch request\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n   * returns an error.\n   */\n  single(): PromiseLike<PostgrestSingleResponse<Result>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PromiseLike<PostgrestSingleResponse<Result>>\n  }\n\n  /**\n   * Return `data` as a single object instead of an array of objects.\n   *\n   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n   * this returns an error.\n   */\n  maybeSingle(): PromiseLike<PostgrestMaybeSingleResponse<Result>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    this.allowEmpty = true\n    return this as PromiseLike<PostgrestMaybeSingleResponse<Result>>\n  }\n\n  /**\n   * Return `data` as a string in CSV format.\n   */\n  csv(): PromiseLike<PostgrestSingleResponse<string>> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PromiseLike<PostgrestSingleResponse<string>>\n  }\n\n  /**\n   * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n   */\n  geojson(): PromiseLike<PostgrestSingleResponse<Record<string, unknown>>> {\n    this.headers['Accept'] = 'application/geo+json'\n    return this as PromiseLike<PostgrestSingleResponse<Record<string, unknown>>>\n  }\n\n  /**\n   * Return `data` as the EXPLAIN plan for the query.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.analyze - If `true`, the query will be executed and the\n   * actual run time will be returned\n   *\n   * @param options.verbose - If `true`, the query identifier will be returned\n   * and `data` will include the output columns of the query\n   *\n   * @param options.settings - If `true`, include information on configuration\n   * parameters that affect query planning\n   *\n   * @param options.buffers - If `true`, include information on buffer usage\n   *\n   * @param options.wal - If `true`, include information on WAL record generation\n   *\n   * @param options.format - The format of the output, can be `\"text\"` (default)\n   * or `\"json\"`\n   */\n  explain({\n    analyze = false,\n    verbose = false,\n    settings = false,\n    buffers = false,\n    wal = false,\n    format = 'text',\n  }: {\n    analyze?: boolean\n    verbose?: boolean\n    settings?: boolean\n    buffers?: boolean\n    wal?: boolean\n    format?: 'json' | 'text'\n  } = {}):\n    | PromiseLike<PostgrestResponse<Record<string, unknown>>>\n    | PromiseLike<PostgrestSingleResponse<string>> {\n    const options = [\n      analyze ? 'analyze' : null,\n      verbose ? 'verbose' : null,\n      settings ? 'settings' : null,\n      buffers ? 'buffers' : null,\n      wal ? 'wal' : null,\n    ]\n      .filter(Boolean)\n      .join('|')\n    // An Accept header can carry multiple media types but postgrest-js always sends one\n    const forMediatype = this.headers['Accept']\n    this.headers[\n      'Accept'\n    ] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`\n    if (format === 'json') return this as PromiseLike<PostgrestResponse<Record<string, unknown>>>\n    else return this as PromiseLike<PostgrestSingleResponse<string>>\n  }\n\n  /**\n   * Rollback the query.\n   *\n   * `data` will still be returned, but the query is not committed.\n   */\n  rollback(): this {\n    if ((this.headers['Prefer'] ?? '').trim().length > 0) {\n      this.headers['Prefer'] += ',tx=rollback'\n    } else {\n      this.headers['Prefer'] = 'tx=rollback'\n    }\n    return this\n  }\n\n  /**\n   * Override the type of the returned `data`.\n   *\n   * @typeParam NewResult - The new result type to override with\n   */\n  returns<NewResult>(): PostgrestTransformBuilder<Schema, Row, NewResult> {\n    return this as unknown as PostgrestTransformBuilder<Schema, Row, NewResult>\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}