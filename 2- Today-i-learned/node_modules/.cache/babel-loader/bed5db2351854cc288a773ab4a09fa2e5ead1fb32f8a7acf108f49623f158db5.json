{"ast":null,"code":"import _toConsumableArray from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zoila/OneDrive/Escritorio/Today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder';\nvar PostgrestQueryBuilder = /*#__PURE__*/function () {\n  function PostgrestQueryBuilder(url, _ref) {\n    var _ref$headers = _ref.headers,\n      headers = _ref$headers === void 0 ? {} : _ref$headers,\n      schema = _ref.schema,\n      fetch = _ref.fetch;\n    _classCallCheck(this, PostgrestQueryBuilder);\n    this.url = url;\n    this.headers = headers;\n    this.schema = schema;\n    this.fetch = fetch;\n  }\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  _createClass(PostgrestQueryBuilder, [{\n    key: \"select\",\n    value: function select(columns) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref2$head = _ref2.head,\n        head = _ref2$head === void 0 ? false : _ref2$head,\n        count = _ref2.count;\n      var method = head ? 'HEAD' : 'GET';\n      // Remove whitespaces except when quoted\n      var quoted = false;\n      var cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*').split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      if (count) {\n        this.headers['Prefer'] = \"count=\".concat(count);\n      }\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n  }, {\n    key: \"insert\",\n    value: function insert(values) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        count = _ref3.count;\n      var method = 'POST';\n      var prefersHeaders = [];\n      var body = values;\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      if (Array.isArray(values)) {\n        var columns = values.reduce(function (acc, x) {\n          return acc.concat(Object.keys(x));\n        }, []);\n        if (columns.length > 0) {\n          var uniqueColumns = _toConsumableArray(new Set(columns)).map(function (column) {\n            return \"\\\"\".concat(column, \"\\\"\");\n          });\n          this.url.searchParams.set('columns', uniqueColumns.join(','));\n        }\n      }\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: body,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n  }, {\n    key: \"upsert\",\n    value: function upsert(values) {\n      var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        onConflict = _ref4.onConflict,\n        _ref4$ignoreDuplicate = _ref4.ignoreDuplicates,\n        ignoreDuplicates = _ref4$ignoreDuplicate === void 0 ? false : _ref4$ignoreDuplicate,\n        count = _ref4.count;\n      var method = 'POST';\n      var prefersHeaders = [\"resolution=\".concat(ignoreDuplicates ? 'ignore' : 'merge', \"-duplicates\")];\n      if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict);\n      var body = values;\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: body,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n  }, {\n    key: \"update\",\n    value: function update(values) {\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        count = _ref5.count;\n      var method = 'PATCH';\n      var prefersHeaders = [];\n      var body = values;\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        body: body,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        count = _ref6.count;\n      var method = 'DELETE';\n      var prefersHeaders = [];\n      if (count) {\n        prefersHeaders.push(\"count=\".concat(count));\n      }\n      if (this.headers['Prefer']) {\n        prefersHeaders.unshift(this.headers['Prefer']);\n      }\n      this.headers['Prefer'] = prefersHeaders.join(',');\n      return new PostgrestFilterBuilder({\n        method: method,\n        url: this.url,\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        allowEmpty: false\n      });\n    }\n  }]);\n  return PostgrestQueryBuilder;\n}();\nexport { PostgrestQueryBuilder as default };","map":{"version":3,"mappings":"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","names":["PostgrestFilterBuilder","PostgrestQueryBuilder","url","headers","schema","fetch","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","allowEmpty","values","prefersHeaders","body","push","unshift","Array","isArray","reduce","acc","x","concat","Object","keys","length","uniqueColumns","Set","column","onConflict","ignoreDuplicates","undefined"],"sources":["C:\\Users\\zoila\\OneDrive\\Escritorio\\Today-i-learned\\node_modules\\@supabase\\postgrest-js\\src\\PostgrestQueryBuilder.ts"],"sourcesContent":["import PostgrestBuilder from './PostgrestBuilder'\nimport PostgrestFilterBuilder from './PostgrestFilterBuilder'\nimport { GetResult } from './select-query-parser'\nimport { Fetch, GenericSchema, GenericTable, GenericView } from './types'\n\nexport default class PostgrestQueryBuilder<\n  Schema extends GenericSchema,\n  Relation extends GenericTable | GenericView\n> {\n  url: URL\n  headers: Record<string, string>\n  schema?: string\n  signal?: AbortSignal\n  fetch?: Fetch\n\n  constructor(\n    url: URL,\n    {\n      headers = {},\n      schema,\n      fetch,\n    }: {\n      headers?: Record<string, string>\n      schema?: string\n      fetch?: Fetch\n    }\n  ) {\n    this.url = url\n    this.headers = headers\n    this.schema = schema\n    this.fetch = fetch\n  }\n\n  /**\n   * Perform a SELECT query on the table or view.\n   *\n   * @param columns - The columns to retrieve, separated by commas\n   *\n   * @param options - Named parameters\n   *\n   * @param options.head - When set to `true`, `data` will not be returned.\n   * Useful if you only need the count.\n   *\n   * @param options.count - Count algorithm to use to count rows in the table or view.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  select<Query extends string = '*', Result = GetResult<Schema, Relation['Row'], Query>>(\n    columns?: Query,\n    {\n      head = false,\n      count,\n    }: {\n      head?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], Result> {\n    const method = head ? 'HEAD' : 'GET'\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = (columns ?? '*')\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    if (count) {\n      this.headers['Prefer'] = `count=${count}`\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<Result>)\n  }\n\n  /**\n   * Perform an INSERT into the table or view.\n   *\n   * By default, inserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to insert. Pass an object to insert a single row\n   * or an array to insert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count inserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  insert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      count,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], undefined> {\n    const method = 'POST'\n\n    const prefersHeaders = []\n    const body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    if (Array.isArray(values)) {\n      const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), [] as string[])\n      if (columns.length > 0) {\n        const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`)\n        this.url.searchParams.set('columns', uniqueColumns.join(','))\n      }\n    }\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<undefined>)\n  }\n\n  /**\n   * Perform an UPSERT on the table or view. Depending on the column(s) passed\n   * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n   * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n   * exist, or if it does exist, perform an alternative action depending on\n   * `ignoreDuplicates`.\n   *\n   * By default, upserted rows are not returned. To return it, chain the call\n   * with `.select()`.\n   *\n   * @param values - The values to upsert with. Pass an object to upsert a\n   * single row or an array to upsert multiple rows.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n   * duplicate rows are determined. Two rows are duplicates if all the\n   * `onConflict` columns are equal.\n   *\n   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n   * `false`, duplicate rows are merged with existing rows.\n   *\n   * @param options.count - Count algorithm to use to count upserted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  upsert<Row extends Relation extends { Insert: unknown } ? Relation['Insert'] : never>(\n    values: Row | Row[],\n    {\n      onConflict,\n      ignoreDuplicates = false,\n      count,\n    }: {\n      onConflict?: string\n      ignoreDuplicates?: boolean\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], undefined> {\n    const method = 'POST'\n\n    const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`]\n\n    if (onConflict !== undefined) this.url.searchParams.set('on_conflict', onConflict)\n    const body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<undefined>)\n  }\n\n  /**\n   * Perform an UPDATE on the table or view.\n   *\n   * By default, updated rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param values - The values to update with\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count updated rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  update<Row extends Relation extends { Update: unknown } ? Relation['Update'] : never>(\n    values: Row,\n    {\n      count,\n    }: {\n      count?: 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<Schema, Relation['Row'], undefined> {\n    const method = 'PATCH'\n    const prefersHeaders = []\n    const body = values\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      body,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<undefined>)\n  }\n\n  /**\n   * Perform a DELETE on the table or view.\n   *\n   * By default, deleted rows are not returned. To return it, chain the call\n   * with `.select()` after filters.\n   *\n   * @param options - Named parameters\n   *\n   * @param options.count - Count algorithm to use to count deleted rows.\n   *\n   * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n   * hood.\n   *\n   * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n   * statistics under the hood.\n   *\n   * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n   * numbers.\n   */\n  delete({\n    count,\n  }: {\n    count?: 'exact' | 'planned' | 'estimated'\n  } = {}): PostgrestFilterBuilder<Schema, Relation['Row'], undefined> {\n    const method = 'DELETE'\n    const prefersHeaders = []\n    if (count) {\n      prefersHeaders.push(`count=${count}`)\n    }\n    if (this.headers['Prefer']) {\n      prefersHeaders.unshift(this.headers['Prefer'])\n    }\n    this.headers['Prefer'] = prefersHeaders.join(',')\n\n    return new PostgrestFilterBuilder({\n      method,\n      url: this.url,\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      allowEmpty: false,\n    } as unknown as PostgrestBuilder<undefined>)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}